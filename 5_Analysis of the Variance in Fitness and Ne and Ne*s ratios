#############################################################################################################################################################
#############################################################################################################################################################
###   Script Details:                                                                                                                                     ###
###   Analysis of the Variance in Fitness and Ne/Ne*s for Singh, A. A.F., Agrawal. 2020. Sex-Specific Variance in Fitness and the Efficacy of Selection   ###
###   Script written by Amardeep Singh (amardeep.singh[at]utoronto.ca)                                                                                    ###
#############################################################################################################################################################
#############################################################################################################################################################

# This script will organize and summarize the main variance in sex-specific fitness data and generate Figure 2 and Figure 3 of the main text
# The script below assumes that you have bootstrapped estimates of variance in fitness to obtain 95% CIs for plotting. 
#     Therefore, make sure to run the "" script and save the bootstrapped data  
# Below, I have organized this script into several parts:
#   Part 1  sets up the data, Parts 2 and 3 generates plots corresponding to Figure 2 and Figure 3
#   Part 4 and Part 5 generates the data in Table 2 and Table 3 respectively. 
#   Part 6 will replicate the statistical analyses for comparing means and variances in fitness across the sexes, mating regimes and population types

#   To generate figures there are 'code chunks' that can be run to generate each figure. You need to run through step 1 to set up the data first though
# NOTE: YOU WILL NEED TO SPECIFY THE PATH TO DATA FILES BELOW BY REPLACING "/FILE/PATH/TO/" WITH YOUR ACTUAL FILE PATHS 


###########################################
## 1. Setting up Packages and Data files ##       ## This section needs to be run for everything downstream and these dataframes must not be dumped!
###########################################
rm(list=ls())

##### Initial Data Summary ####

# Loading required packages 
require(doBy)
require(ggplot2)

# Reading in fitness data
data=read.csv("/FILE/PATH/TO/FitnessDataNeprojectFinalSept2020.csv", header = TRUE, sep = ",")
# Reading in data from bootstrap procedure 
bootstrapped.data=read.csv("/FILE/PATH/TO/BootstrappedFitnessDataFinalSept2020.csv")

data=read.csv("/Users/amardeepsingh/Dropbox/Grad School Stuff/My Research/Environmental Heterogeneity and Mating Regieme Project/Data/Data Files for Dryad/FitnessDataNeprojectFinalSept2020.csv", header = TRUE, sep = ",")
# Reading in data from bootstrap procedure 
bootstrapped.data=read.csv("/Users/amardeepsingh/Dropbox/Grad School Stuff/My Research/Environmental Heterogeneity and Mating Regieme Project/Data/Data Files for Dryad/BootstrappedFitnessDataFinalSept2020.csv")


##NOTE in these datasets population/population.type 1 and 2 refer to the low heterogenity treatments (i.e. 100% high/low condition individuals respectively)
## "high" and "low" refer to larval densities in the focal.individual column

data=as.data.frame(data)
data$n.wt=as.numeric(as.character(data$n.wt))
data=data[data$n.total == "32",] # Remove any observation where we have less than 32 offspring counted
data=data[!(is.na(data$n.wt)),] # Remove any rows with NA in fitness column 

data.summary=summaryBy(n.wt ~ treatment + population.type + sex, data=data, FUN = c(mean, var))
# Apply the variance adjustment and calculate the adjusted variance (see Methods and Results for details)
data.summary$adjusted.variance = (2/data.summary$n.wt.mean)* (1 - (2/data.summary$n.wt.mean))*data.summary$n.wt.mean + (2/data.summary$n.wt.mean)^2 * (data.summary$n.wt.var)
# For convenience below, convert sex from m and f to male and female
data.summary$sex = gsub('m', 'male', data.summary$sex)
data.summary$sex = gsub('f', 'female', data.summary$sex)

#############################################################
## 2. Figure 2: Adjusted Variance in Sex-Specific Fitness  ##
#############################################################

# Assign 95% CIs for each estimated variance and adjusted variance Values
# Run this loop to get a colum of the lower and upper 95% CI for each variance and adjusted variance value
treatment.levels = levels(bootstrapped.data$treatment)
sex.levels = levels(bootstrapped.data$sex)
population.type.levels = levels(as.factor((bootstrapped.data$population.type)))
quantile.df = as.data.frame(matrix(NA, nrow = 25, ncol = 9))
names(quantile.df) = c("treatment", "sex", "population", "mean.lower.ci", "mean.upper.ci", "unadj.lower.ci", "unadj.upper.ci", "adj.lower.ci", "adj.upper.ci")
row = 0
for (i in treatment.levels){
  for (j in sex.levels){
    for (k in population.type.levels){
      bootstrapped.data.subset = bootstrapped.data[bootstrapped.data$treatment == i & bootstrapped.data$sex == j & bootstrapped.data$population.type == k ,]
      row = row + 1
      quantile.df[row,"treatment"] = i
      quantile.df[row,"sex"] = j
      quantile.df[row,"population"] = as.integer(k)
      
      
      #calculating upper and lower CIs for mean, var and adj. var
      quantile.df[row,"mean.lower.ci"] = as.numeric(quantile(bootstrapped.data.subset$mean.wt,c(0.05)))
      quantile.df[row,"mean.upper.ci"] = as.numeric(quantile(bootstrapped.data.subset$mean.wt,c(0.95)))
      
      quantile.df[row,"unadj.lower.ci"] = as.numeric(quantile(bootstrapped.data.subset$var.wt,c(0.05)))
      quantile.df[row,"unadj.upper.ci"] = as.numeric(quantile(bootstrapped.data.subset$var.wt,c(0.95)))
      
      quantile.df[row,"adj.lower.ci"] = as.numeric(quantile(bootstrapped.data.subset$adjusted.variance,c(0.05)))
      quantile.df[row,"adj.upper.ci"] = as.numeric(quantile(bootstrapped.data.subset$adjusted.variance,c(0.95)))
      
    }
  }
}
# Combine fitness data summary with CI estimates 
data.summary.figure2 = merge(data.summary, quantile.df, by.x = c("sex", "treatment", "population.type"), by.y = c("sex", "treatment","population"), sort = FALSE)

# Plot of adjusted variances 
# Change labels of data for each population type 
data.summary.figure2$population.type = data.summary$population.type
data.summary.figure2$population.type = gsub(as.numeric(1), "A", data.summary.figure2$population.type)
data.summary.figure2$population.type = gsub(as.numeric(2), "B", data.summary.figure2$population.type)
data.summary.figure2$population.type = gsub(as.numeric(3), "C", data.summary.figure2$population.type)
data.summary.figure2$population.type = gsub(as.numeric(4), "D", data.summary.figure2$population.type)
data.summary.figure2$population.type = gsub(as.numeric(5), "E", data.summary.figure2$population.type)

data.summary.figure2$population.type.label = paste("Population Type ", data.summary.figure2$population.type, sep = "")

# Plotting Adjusted Variances ## Figure 2
var.plot=ggplot(data.summary.figure2, aes(y = adjusted.variance))+
  geom_point(aes(x=sex, shape=treatment, colour=sex), size = 6.5,  position=position_dodge(width=0.5))+
  geom_errorbar(aes(ymin=adj.lower.ci, ymax=adj.upper.ci,x=sex, shape=treatment, colour=sex),size = 1.5, width=0.0,position=position_dodge(width=0.5)) + 
  theme_bw() +
  ylim(0, 10) +
  theme(panel.grid.minor.x=element_blank(),panel.grid.minor.y=element_blank(),panel.grid.major.x=element_blank(), panel.grid.major.y=element_blank(),
        text = element_text(size=40, family = "Times"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), 
        axis.title.y = element_blank(), axis.text.y=element_text(colour = "black"), axis.ticks.y=element_line(colour = "black"),
        strip.background = element_rect(colour = "black", fill = "light grey"), strip.text = element_text(size = 40), legend.position = "none") +
  facet_wrap(~population.type, nrow = 1, strip.position="bottom", scale = "free_x") + 
  scale_fill_manual(values=c("#F4A582", "#92C5DE")) 
var.plot


###################################################################
## 3. Figure 3: Plotting the ratio r of Ne_mf*s_mf / Ne_ff*s_ff  ##
###################################################################
# Plot of the the ratio of Ne*s in a population of males and females (i.e., Ne_mf*s_mf) relative to a population where males are "female-like" with 
#   respect to the variance in fitness and strength of selection (i.e., Ne_ff*s_ff)

# Setting up dataframe for plotting 
Ne.df = as.data.frame(matrix(NA, nrow = 13, ncol = 6))
names(Ne.df) = c("treatment", "population","Ne.mf", "Ne.ff", "ratio.of.Ne.mf.to.Ne.ff", "ratio.of.Nes")

treatment.levels = levels(data.summary$treatment)
population.type.levels = levels(as.factor((data.summary$population.type)))
# Calculating the ratio r for each population type
row = 0
for (i in treatment.levels){
  for (k in population.type.levels){
    data.summary.subet.male = data.summary[data.summary$treatment == i & data.summary$sex == "male" & data.summary$population.type == k,]
    data.summary.subet.female = data.summary[data.summary$treatment == i & data.summary$sex == "female" & data.summary$population.type == k,]
    
    if (nrow(data.summary.subet.male) > 0 & nrow(data.summary.subet.female) > 0) {
      row = row + 1
      Ne.df[row,"treatment"] = i
      Ne.df[row,"population"] = as.integer(k)
      
      #calculating upper and lower CIs for mean, var and adj. var
      Ne.df[row,"Ne.mf"] = as.numeric((8 *32) / (4 +  data.summary.subet.male$adjusted.variance + data.summary.subet.female$adjusted.variance))
      Ne.df[row,"Ne.ff"] = as.numeric((8 *32) / (4 +  data.summary.subet.female$adjusted.variance + data.summary.subet.female$adjusted.variance))
    }
  }
}
Ne.df$ratio.of.Ne.mf.to.Ne.ff= Ne.df$Ne.mf / Ne.df$Ne.ff 
Ne.df$ratio.of.Nes = Ne.df$Ne.mf / Ne.df$Ne.ff * 1.25
names(Ne.df)[1:2] = c("treatment", "population")

### Bootstrapping Ne*s ratio values to generate 95% CIs
treatment = c("vial", "cage", "monogamy")
population = c(1,2,3,4,5)

Ne.df$Ne.mf.upper = NA
Ne.df$Ne.mf.lower = NA
Ne.df$Ne.ff.upper = NA
Ne.df$Ne.ff.lower = NA

Ne.df$Ne.s.ratio.upper = NA
Ne.df$Ne.s.ratio.lower = NA
#Ne.df$Ne.s.ff.upper = NA
#Ne.df$Ne.s.ff.lower = NA

for (i in treatment){
  for (j in population){
    tmp.female = subset(bootstrapped.data, bootstrapped.data$treatment == i & bootstrapped.data$sex == "female" & bootstrapped.data$population.type == j)$adjusted.variance
    tmp.male = subset(bootstrapped.data, bootstrapped.data$treatment == i & bootstrapped.data$sex == "male" & bootstrapped.data$population.type == j)$adjusted.variance
    
    Ne.mf.tmp=c(NA, length = 10000)
    Ne.ff.tmp=c(NA, length = 10000)
    #Ne.mf.ratio = c(NA, length = 10000)
    Nes.ratio = c(NA, length = 10000)
    
    for (k in 1:10000){
      Ne.mf.tmp[k]=(8*32)/(tmp.male[k]+tmp.female[k]+4)
      Ne.ff.tmp[k]=(8*32)/(tmp.female[k]+tmp.female[k]+4)
      
      Nes.ratio[k] = ( ((8*32)/(tmp.male[k]+tmp.female[k]+4)) / ((8*32)/(tmp.female[k]+tmp.female[k]+4)) ) * 1.25 
    }
    
    if (i == "monogamy" & j == 2 | i == "monogamy" & j == 4) {
      
    } else {
      Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.mf.upper = quantile(Ne.mf.tmp, 0.95)
      Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.mf.lower = quantile(Ne.mf.tmp, 0.05)
      Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.ff.upper = quantile(Ne.ff.tmp, 0.95)
      Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.ff.lower = quantile(Ne.ff.tmp, 0.05)
      
      Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.s.ratio.upper = quantile(Nes.ratio, 0.95)
      Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.s.ratio.lower = quantile(Nes.ratio, 0.05)
      #Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.s.ff.upper = quantile(Nes.ratio, 0.95)
      #Ne.df[Ne.df$treatment == i & Ne.df$population == j,]$Ne.s.ff.lower = quantile(Nes.ratio, 0.05)
    }
  }
}

# Change labels of data for each population type for plotting convenience 
Ne.df$population.type = Ne.df$population
Ne.df$population.type = gsub(as.numeric(1), "A", Ne.df$population.type)
Ne.df$population.type = gsub(as.numeric(2), "B", Ne.df$population.type)
Ne.df$population.type = gsub(as.numeric(3), "C", Ne.df$population.type)
Ne.df$population.type = gsub(as.numeric(4), "D", Ne.df$population.type)
Ne.df$population.type = gsub(as.numeric(5), "E", Ne.df$population.type)

# shapes to be consistent with figure 2:
# Monogamy = 17; Complex environments = 16; Simple Environments = 15
Nes.plot=ggplot(Ne.df, aes(y = ratio.of.Nes)) +
  geom_point(aes(x=treatment, shape = treatment), size = 7.5,  position=position_dodge(width=0.5)) + scale_shape_manual(values=c(16, 17, 15)) +
  #geom_point(aes(size=2, x=treatment),  position=position_dodge(0.5))+
  geom_errorbar(aes(ymin=Ne.s.ratio.lower, ymax=Ne.s.ratio.upper,x=treatment),size = 2, width=0.0,position=position_dodge(0.5)) + 
  theme_bw() +
  ylim(0.5,2) +
  theme(panel.grid.minor.x=element_blank(), panel.grid.minor.y=element_blank(), panel.grid.major.x=element_blank(), panel.grid.major.y=element_blank(),
        text = element_text(size=40, family = "Times"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), 
        axis.title.y = element_blank(), axis.text.y=element_text(colour = "black"), axis.ticks.y=element_line(colour = "black"),
        strip.background = element_rect(colour = "black", fill = "light grey"), strip.text = element_text(size = 40), legend.position = "none") +
  geom_hline(yintercept=1) +
  scale_fill_manual(values = "#FFA500") +
  facet_wrap(~population.type, nrow=1, strip.position = "bottom", scale = "free_x") 
Nes.plot


######################################################
## 4.  Table 2: Summary Table for Adjusted variance ##
######################################################
# NOTE: Point estimates reported in Table 2 of the main text are the ACTUAL estimates of variances. Estimates reported in the summary table below are those means from the bootstrapped data.
#       Confidence intervals of estimates reported in Table 2 correspond to the 95% quantiles in the summary table below.

## Function to calculate the adjusted variance in fitness ## NOTE: We didn't end up using this, but and instead found that this adjustment could be used even when the 
#   mean was > 2 (see Supplemental Materials of the paper). Left code here just for legacy to remind me of what we did and why
# If the mean of the resample is < or = 2 then use the obsered variance 
#adjusted.variance.function  = function(mean, variance){
#  ifelse (mean > 2, ((2 / mean)*(1 - (2/mean))*(mean) + ((2 / mean)^2 * (variance))), variance)
#}
## Replace female monogamy with var because the mean was greater than 2
#for (i in 1:nrow(bootstrapped.data)){
#  if (bootstrapped.data[i,"treatment"] == "monogamy" & bootstrapped.data[i,"sex"] == "female") {
#    bootstrapped.data[i,9] = bootstrapped.data[i,7] 
#  } else {
#  }
#}

# This is the actual function we applied
adjusted.variance.function  = function(mean, variance){
  ((2 / mean)*(1 - (2/mean))*(mean)) + ((2 / mean)^2 * (variance))
}
bootstrapped.data$adjusted.variance.alternative = adjusted.variance.function(bootstrapped.data$mean.wt, bootstrapped.data$var.wt)

## Summary table for adjusted variance for each sex * treatment combination ## This summary correspoinds to Table 2 in the main text (except the point estimates are not identical! - See above Note)
adj.variance.summary.table = summaryBy(adjusted.variance.alternative ~ treatment+population.type+sex, FUN = c(mean, quantile.function.lower,quantile.function.upper), data = bootstrapped.data)


##########################################################
## 5.  Table 3:  Summary table for Ne and Ratios of Ne  ##
##########################################################
# NOTE: Point estimates reported in Table 3 of the main text are the ACTUAL estimates of variances. Estimates reported in the summary table below are those means from the bootstrapped data.
#       Confidence intervals of estimates reported in Table 3 correspond to the 95% quantiles in the summary table below.
# NOTE: There are two summary dataframes generated below, one that corresponds to to columns 1 and 2 and Table 3 and one that corresponds to column 3 of Table 3 - This info is denoted next to commands
# Merge dataframe so that male and female variance for each population type and mating regime are on a single line 
male.tmp = bootstrapped.data[bootstrapped.data$sex == "male", ]
female.tmp = bootstrapped.data[bootstrapped.data$sex == "female",]

Ne.summary.table.tmp = merge(male.tmp, female.tmp, by.x=c("treatment", "population.type", "replicate"), by.y = c("treatment", "population.type", "replicate"), sort = FALSE)
Ne.summary.table.tmp = Ne.summary.table.tmp[,c(1:3,7,12)]
colnames(Ne.summary.table.tmp) = c("treatment", "population.type", "replicate", "male.adj.var", "female.adj.var")

Ne.summary.table.tmp$Ne_mf = 8*(32) / (Ne.summary.table.tmp$male.adj.var + Ne.summary.table.tmp$female.adj.var + 4)
Ne.summary.table.tmp$Ne_ff = 8*(32) / (Ne.summary.table.tmp$female.adj.var + Ne.summary.table.tmp$female.adj.var + 4)

# Summary of Ne Data ## Columns 1 and 2 in Table 3 in the main text
Ne_mf.summary.table = summaryBy(Ne_mf ~ treatment + population.type, FUN = c(mean, quantile.function.lower, quantile.function.upper), data = Ne.summary.table.tmp)
Ne_ff.summary.table = summaryBy(Ne_ff ~ treatment + population.type, FUN = c(mean, quantile.function.lower, quantile.function.upper), data = Ne.summary.table.tmp)

# Summary for ratio of Ne_mf / Ne_ff ## Column 3 in Table 3 of the main text
Ne.ratio.summary = Ne.summary.table.tmp[,1:3]
Ne.ratio.summary$ratio = Ne.summary.table.tmp$Ne_mf / Ne.summary.table.tmp$Ne_ff
Ne.ratio.summary$Nes = (Ne.summary.table.tmp$Ne_mf / Ne.summary.table.tmp$Ne_ff) * 1.25

Ne.ratio.summary.table = summaryBy(ratio ~ treatment + population.type, FUN = c(mean, quantile.function.lower, quantile.function.upper), data = Ne.ratio.summary)
## "Ne.Nes.summary.table" corresponds to Column 3 in Table 3 of the main text
Ne.Nes.summary.table = summaryBy(Nes ~ treatment + population.type, FUN = c(mean, quantile.function.lower, quantile.function.upper), data = Ne.ratio.summary)


#

##########################################################################
##  6. Statistical Analysis to Compare Mean and Variance in Fitness     ##
##########################################################################
# The script below will replicate the results presented in the paper for comparisions of means and variances in fitness in the Results text.
# Statistical significance was assessed on the basis of non-overlapping 95% CIs

#####   Comparison of means and variances between the sexes    #####

male.data.mean = subset(bootstrapped.data[bootstrapped.data$sex == "male", ])$mean.wt
female.data.mean = subset(bootstrapped.data[bootstrapped.data$sex == "female", ])$mean.wt
mean.difference.between.sexes = male.data.mean - female.data.mean
mean(mean.difference.between.sexes)
quantile(mean.difference.between.sexes,c(0.05,0.95))

male.data.variance.vial = subset(bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "vial", ])$adjusted.variance.alternative
female.data.variance.vial = subset(bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "vial", ])$adjusted.variance.alternative
male.data.variance.cage = subset(bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "cage", ])$adjusted.variance.alternative
female.data.variance.cage = subset(bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "cage", ])$adjusted.variance.alternative
male.data.variance.monogamy = subset(bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "monogamy", ])$adjusted.variance.alternative
female.data.variance.monogamy = subset(bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "monogamy", ])$adjusted.variance.alternative

male.data.variance = c(male.data.variance.vial,male.data.variance.cage, male.data.variance.monogamy)
female.data.variance = c(female.data.variance.vial,female.data.variance.cage, female.data.variance.monogamy)

# Comparison across all mating regimes 
mean(male.data.variance - female.data.variance)
quantile((male.data.variance - female.data.variance), c(0.05,0.95))

# Comparison in Vials 
mean(male.data.variance.vial - female.data.variance.vial)
quantile((male.data.variance.vial - female.data.variance.vial), c(0.05,0.95))
# Comparison in Cage
mean(male.data.variance.cage - female.data.variance.cage)
quantile((male.data.variance.cage - female.data.variance.cage), c(0.05,0.95))
# Comparison in monogamy 
mean(male.data.variance.monogamy - female.data.variance.monogamy)
quantile((male.data.variance.monogamy - female.data.variance.monogamy), c(0.05,0.95))


####       Comparison of variances across environments        #####

# Comparison One -- Type1/5 with Type3
# Males 
male.population.type.1 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 1,])$adjusted.variance.alternative
male.population.type.3 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 3,])$adjusted.variance.alternative
male.population.type.5 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 5,])$adjusted.variance.alternative

# Females 
female.population.type.1 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 1,])$adjusted.variance.alternative
female.population.type.3 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 3,])$adjusted.variance.alternative
female.population.type.5 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 5,])$adjusted.variance.alternative

low.het.males = (male.population.type.1 + male.population.type.5) / 2
high.het.males = male.population.type.3

low.het.females = (female.population.type.1 + female.population.type.5) / 2
high.het.females = female.population.type.3

print(c(mean(low.het.males - high.het.males), quantile((low.het.males - high.het.males), c(0.05,0.95))))
print(c(mean(low.het.females - high.het.females), quantile((low.het.females - high.het.females), c(0.05,0.95))))

# Comparison Two -- Type1/5 with Type3/4/5
male.population.type.1 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 1 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
male.population.type.2 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 2 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
male.population.type.3 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 3 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
male.population.type.4 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 4 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
male.population.type.5 = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$population.type == 5 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative

# Females 
female.population.type.1 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 1 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
female.population.type.2 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 2 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
female.population.type.3 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 3 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
female.population.type.4 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 4 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative
female.population.type.5 = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$population.type == 5 & bootstrapped.data$treatment != "monogamy",])$adjusted.variance.alternative

low.het.males = (male.population.type.1 + male.population.type.5) / 2
high.het.males = (male.population.type.2 + male.population.type.3 + male.population.type.4) / 3

low.het.females = (female.population.type.1 + female.population.type.5) / 2
high.het.females = (female.population.type.2+ female.population.type.3 + female.population.type.4) / 3

print(c(mean(low.het.males - high.het.males), quantile((low.het.males - high.het.males), c(0.05,0.95))))
print(c(mean(low.het.females - high.het.females), quantile((low.het.females - high.het.females), c(0.05,0.95))))


####     Comparison of variances across mating regimes        ####

# Males 
male.vial = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "vial", ])$adjusted.variance.alternative
male.cage = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "cage",])$adjusted.variance.alternative
male.vial.subset = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "vial" & bootstrapped.data$population.type == 1 | 
                               bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "vial" & bootstrapped.data$population.type == 3 |
                               bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "vial" & bootstrapped.data$population.type == 5 ,])$adjusted.variance.alternative
male.cage.subset = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "cage" & bootstrapped.data$population.type == 1 | 
                               bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "cage" & bootstrapped.data$population.type == 3 |
                               bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "cage" & bootstrapped.data$population.type == 5 ,])$adjusted.variance.alternative
male.monogamy = (bootstrapped.data[bootstrapped.data$sex == "male" & bootstrapped.data$treatment == "monogamy",])$adjusted.variance.alternative

# Females 
female.vial = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "vial", ])$adjusted.variance.alternative
female.cage = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "cage",])$adjusted.variance.alternative
female.vial.subset = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "vial" & bootstrapped.data$population.type == 1 | 
                                 bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "vial" & bootstrapped.data$population.type == 3 |
                                 bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "vial" & bootstrapped.data$population.type == 5 ,])$adjusted.variance.alternative
female.cage.subset = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "cage" & bootstrapped.data$population.type == 1 | 
                                 bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "cage" & bootstrapped.data$population.type == 3 |
                                 bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "cage" & bootstrapped.data$population.type == 5 ,])$adjusted.variance.alternative
female.monogamy = (bootstrapped.data[bootstrapped.data$sex == "female" & bootstrapped.data$treatment == "monogamy",])$adjusted.variance.alternative

# Vial vs Cage
print(c(mean(male.vial - male.cage), quantile((male.vial - male.cage), c(0.05,0.95))))
print(c(mean(female.vial - female.cage), quantile((female.vial - female.cage), c(0.05,0.95))))

# Polygamy versus monogamy 
male.polygamy = (male.vial.subset + male.cage.subset) / 2
female.polygamy = (female.vial.subset + female.cage.subset) / 2

print(c(mean(male.polygamy - male.monogamy), quantile((male.polygamy - male.monogamy), c(0.05,0.95))))
print(c(mean(female.polygamy - female.monogamy), quantile((female.polygamy - female.monogamy), c(0.05,0.95))))



#
